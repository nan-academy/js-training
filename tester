#!/usr/bin/env node

'use strict'

// extend str for colors
'no0.blk30.red31.grn32.ylw33.blu34.mgt35.cyn36.wht37'
  .split('.')
  .map(str => str.split(/([0-9]+)$/))
  .forEach(([name, value]) => {
    String.prototype[name] = function () { return `\u001b[${value}m${this}\u001b[0m` }
    String.prototype[`_${name}`] = function () { return `\u001b[${value};1m${this}\u001b[0m` }
  })

const fs = require('fs')
const { performance: { now } } = require('perf_hooks')
const { promisify } = require('util')
const Module = require('module')
const { dirname, join } = require('path')
const assert = require('assert')
const pkg = require('./package.json')

const readFile = promisify(fs.readFile)

const current = []
const ok = '  ✓ '.grn()

const formatPathParts = (value, i) => i
  ? ':'.mgt() + value.blu()
  : value.wht()

const wrapInParen = ((open, close) => str => `${open}${str}${close}`)('('.wht(), ')'.wht())

const prettyPath = p => p.split(':').map(formatPathParts).join('')
const parseStackLine = (line, err) => {
  if (!line) return ''
  let [, src, path] = line.split(/at (.+) \((.+)\)$/)
  if (!src) return wrapInParen(prettyPath(line))
  if ((src).includes('anonymous')) {
    src = err.key ? `assert.${err.key.cyn()}` : (err.name || 'Error').cyn()
  }
  return wrapInParen(`${src} ${prettyPath(path)}`)
}

const prettyStack = err => err.message.red()
  + ' ' + parseStackLine(err.stack.split('\n')
    .filter(line => line.includes(current.filename))[0], err)

Object.keys(assert).filter(key => key !== 'fail').forEach(key => {
  const fn = assert[key]
  const last = fn.length - 1
  assert[key] = (...args) => {
    try {
      fn(...args)
      current.push(`${ok}${current.length + 1} - ${args[last] || key}`)
    } catch (err) {
      current.allPass = false
      err.key = key
      current.push(`  ✗`.red() + ' ' + (current.length + 1) + ' ' + prettyStack(err))
    }
  }
})

function testPack() {
  let args = process.argv.slice(2);
  return pkg.tests.map(async (key) => {
    if (args.length > 0 && args.indexOf(String(key.step)) === -1)
      return {};
    return ({
      code: await readFile(join(__dirname, 'exercises', key.name + '.js'), 'utf-8'),
      filename: key.name + '.js',
      key,
    })
  });
}

Promise.all(testPack()).then(codes => {
  let failedTestCount = 0
  for (const { code, filename, key } of codes) {
    // console.log(code, filename, key);
    if (code) {
      current.length = 0
      current.allPass = true
      current.filename = filename

      try {
        (new Module(filename, module.parent))._compile(code, filename)
        if (current.allPass) {
          console.log('✓'.grn(), 'Step:', key.step, key.name)
        } else {
          failedTestCount++
          console.log('-'.blu(), 'Step:', key.step, key.name)
          console.log(current.join('\n'))
        }
      } catch (err) {
        if (!failedTestCount) {
          console.log(`✗`.red(), 'Step:', key.step, key.name, prettyStack(err))
        }
        failedTestCount++
      }
    }
  }
  if (failedTestCount > 1) {
    console.log(`...and ${failedTestCount - 1} more to pass.`.wht())
  }
  process.exit(failedTestCount);
}).catch(console.error)

